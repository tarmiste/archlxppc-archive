--- src/mouseemu/mouseemu.c	2005-03-30 08:40:30.000000000 +0200
+++ mouseemu.c	2012-04-25 13:37:59.000000000 +0200
@@ -18,17 +18,27 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <stdarg.h>
 #include <unistd.h>
+#include <errno.h>
 #include <fcntl.h>
 #include <string.h>
 #include <signal.h>
 #include <wait.h>
+#include <syslog.h>
 #include <sys/time.h>
+#include <sys/types.h>
+#include <sys/stat.h>
 #include <linux/input.h>
+#ifndef BUS_VIRTUAL /* new in Linux 2.6.19 */
+#define BUS_VIRTUAL 0x06
+#endif
 #include <linux/uinput.h>
 #include "mouseemu.h"
 #include "defkeys.h"
 
+static int use_defaults		= 0;
+
 static int b2_mod 		= BUTTON2MOD;
 static int b2_key 		= BUTTON2KEY;
 
@@ -47,12 +57,25 @@
 
 static int running 		= -1;
 volatile sig_atomic_t		answer = 1;
+volatile sig_atomic_t		rescan = 0;
 pid_t pid		= -1;
-#define EVENT_DEVS 6
+#define EVENT_DEVS 32
 static kdev eventdevs[EVENT_DEVS];
 static input_handler ihandler[EVENT_DEVS];
 
+static int debug	= 0;
+static int autorescan   = 0;
 
+/* print debug messages to syslog or stderr */
+void debugf(const char *format, ...) {
+	va_list ap;
+	
+	if (debug) {
+		va_start(ap, format);	
+		vsyslog(LOG_DEBUG, format, ap);
+		va_end(ap);
+	}
+}
 
 static void send_event(int fd, int type, int code, int value)
 {
@@ -72,7 +95,7 @@
 
 static void passthrough(int fd, struct input_event event)
 {
-	if (write(fd, &event, sizeof(event)) < sizeof(event))
+	if (write(fd, &event, sizeof(event)) <= 0)
 		perror("passthrough error");
 
 }
@@ -164,52 +187,69 @@
 	}
 }
 
-void keyboard_handler (int fd)
+void keyboard_handler (struct input_event inp)
 {
-	struct input_event inp;
-	if (read(fd, &inp, sizeof(inp)) == sizeof(inp)) {
-		if (!event_parse(inp.code, inp.value) && !is_modifier(inp)) {
-			last_key = (inp.time.tv_sec*1000000 + inp.time.tv_usec);
-		}
+	if (inp.type != EV_KEY && inp.type != EV_REP) {
+		passthrough(ui_keyb_fd, inp);
+		return;
+	}
+	if (inp.type == EV_KEY && (inp.code == BTN_LEFT || inp.code == BTN_MIDDLE || inp.code == BTN_RIGHT))
+		return;
+
+	if (!event_parse(inp.code, inp.value) && !is_modifier(inp)) {
+		last_key = (inp.time.tv_sec*1000000 + inp.time.tv_usec);
+	}
 	/* I think its best not to pass scroll, or experiment with not passing the release if
 	 * we actually used it for scrolling (but some apps may get stuck?)
 	 */
-		if (inp.code != b2_key && inp.code != b3_key && !b2_mod_pressed && !b3_mod_pressed) {
-			passthrough(ui_keyb_fd, inp);
-		}
+	if (inp.code != b2_key && inp.code != b3_key) {
+		passthrough(ui_keyb_fd, inp);
+	}
+}
+
+static void mouse_handler (struct input_event inp)
+{
+	if (inp.type != EV_KEY && inp.type != EV_REL && inp.type != EV_SYN)
+		return;
+	if (inp.type == EV_KEY && (inp.code < BTN_MISC || inp.code >= KEY_OK))
+		return;
+
+	if (inp.type == EV_KEY && inp.code == BTN_LEFT) {
+		if (b2_key == BTN_LEFT && b2_mod_pressed)
+			report_click(BTN_MIDDLE, inp.value);
+		else if (b3_key == BTN_LEFT && b3_mod_pressed)
+			report_click(BTN_RIGHT, inp.value);
+		else
+			passthrough(ui_mouse_fd, inp);
+	}
+	else if (scroll_mod_pressed 
+	      && inp.type == EV_REL 
+	      && (inp.code == REL_Y || inp.code == REL_X)) {
+		report_scroll (inp.value);
+		//printf("inp.value %d\n", inp.value);
+	} else {
+		if ((inp.time.tv_sec*1000000+inp.time.tv_usec)-last_key > typing_block_delay*1000 
+		|| inp.type == EV_REL
+		|| (inp.type == EV_KEY && inp.code != BTN_MIDDLE && inp.code != BTN_RIGHT))
+			passthrough(ui_mouse_fd, inp);
 	}
 }
 
-static void mouse_handler (int fd)
+static void event_handler (int mode, int fd)
 {
-	int count;
 	struct input_event inp;
 
-	if ((count = read(fd, &inp, sizeof(inp))) == sizeof(inp)) {
-		if (inp.type == EV_KEY && inp.code == BTN_LEFT) {
-			if (b2_key == BTN_LEFT && b2_mod_pressed)
-				report_click(BTN_MIDDLE, inp.value);
-			else if (b3_key == BTN_LEFT && b3_mod_pressed)
-				report_click(BTN_RIGHT, inp.value);
-			else
-				passthrough(ui_mouse_fd, inp);
-		}
-		else if (scroll_mod_pressed 
-		      && inp.type == EV_REL 
-		      && (inp.code == REL_Y || inp.code == REL_X)) {
-			report_scroll (inp.value);
-			//printf("inp.value %d\n", inp.value);
-		} else {
-			if ((inp.time.tv_sec*1000000+inp.time.tv_usec)-last_key > typing_block_delay*1000 
-			|| inp.type == EV_REL)
-				passthrough(ui_mouse_fd, inp);
-		}
+	if (read(fd, &inp, sizeof(inp)) == sizeof(inp)) {
+		if (mode & HANDLER_KEYBOARD)
+			keyboard_handler(inp);
+		if (mode & HANDLER_MOUSE)
+			mouse_handler(inp);
 	}
 }
 
 void scan_for_devs()
 {
-	int n, m, fd;
+	int n, m, fd, mode;
 	char filename[20];
 	unsigned long bit[NBITS(EV_MAX)];
 	unsigned short id[EVENT_DEVS];
@@ -217,23 +257,48 @@
 	for (n = 0, m = 0; n < EVENT_DEVS; n++) {
 		sprintf(filename, "/dev/input/event%d", n);
 		if ((fd = open(filename, O_RDONLY)) >= 0) {
-			ioctl(fd, EVIOCGBIT(0, EV_MAX), bit);
+			unsigned long mousebtns[NBITS(KEY_MAX)], mouserels[NBITS(REL_MAX)];
+			memset(mousebtns, 0, sizeof(mousebtns));
+			memset(mouserels, 0, sizeof(mouserels));
+			mode = 0;
+			ioctl(fd, EVIOCGBIT(0, sizeof(bit)), bit);
+			ioctl(fd, EVIOCGID, id);
 			if (test_bit(EV_KEY, bit) && test_bit(EV_REP, bit)) {
-				ioctl(fd, EVIOCGID, id);
+				/* our own virtual keyboard (on rescans)*/
+				if (id[ID_PRODUCT] == 0x1F && id[ID_VENDOR] == 0x1F) {
+					close(fd);
+					continue;
+				}
+				mode |= HANDLER_KEYBOARD;
 				if (id[ID_PRODUCT] != eventdevs[m].product ||
 					id[ID_VENDOR]  != eventdevs[m].vendor) {
-					if (eventdevs[m].handle >= 0) {
-						unregister_inputhandler(eventdevs[m].handle);
-						close(eventdevs[m].handle);
-					}
-					eventdevs[m].handle= fd;
-					eventdevs[m].product = id[ID_PRODUCT];
-					eventdevs[m].vendor = id[ID_VENDOR];
-					register_inputhandler(fd, keyboard_handler, 1);
+					debugf("keyboard: fd %d event%d, vendor %4x product %4x\n", fd, n, id[ID_VENDOR], id[ID_PRODUCT]);
 				}
-				m++;
-			} else if (test_bit(EV_REL, bit)) {
-				ioctl(fd, EVIOCGID, id);
+			}
+			if (test_bit(EV_REL, bit)) {
+				int i;
+				/* our own virtual mouse (on rescans)*/
+				if (id[ID_PRODUCT] == 0x1E && id[ID_VENDOR] == 0x1F) {
+					close(fd);
+					continue;
+				}
+				mode |= HANDLER_MOUSE;
+				if (id[ID_PRODUCT] != eventdevs[m].product ||
+					id[ID_VENDOR]  != eventdevs[m].vendor) {
+					debugf("mouse   : fd %d event%d, vendor %4x product %4x\n", fd, n, id[ID_VENDOR], id[ID_PRODUCT]);
+				}
+				ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(mousebtns)), mousebtns);
+				debugf("mouse   : buttons:\n");
+				for (i = BTN_MISC; i < KEY_OK; ++i)
+					if (((unsigned char *)mousebtns)[i / 8] & (1 << (i % 8)))
+						debugf("  0x%x\n", i);
+				ioctl(fd, EVIOCGBIT(EV_REL, sizeof(mouserels)), mouserels);
+				debugf("mouse   : relative events:\n");
+				for (i = REL_X; i <= REL_MAX; ++i)
+					if (((unsigned char *)mouserels)[i / 8] & (1 << (i % 8)))
+						debugf("  0x%x\n", i);
+			}
+			if (mode) {
 				if (id[ID_PRODUCT] != eventdevs[m].product ||
 					id[ID_VENDOR]  != eventdevs[m].vendor) {
 					if (eventdevs[m].handle >= 0) {
@@ -243,9 +308,12 @@
 					eventdevs[m].handle= fd;
 					eventdevs[m].product = id[ID_PRODUCT];
 					eventdevs[m].vendor = id[ID_VENDOR];
-					register_inputhandler(fd, mouse_handler, 1);
-				}
-				m++;		
+					memcpy(eventdevs[m].mousebtns, mousebtns, sizeof(mousebtns));
+					memcpy(eventdevs[m].mouserels, mouserels, sizeof(mouserels));
+					register_inputhandler(mode, fd, event_handler, 1);
+				} else
+					close(fd);
+				m++;
 			} else
 				close(fd);
 		}
@@ -254,15 +322,41 @@
 		eventdevs[m].product = 0;
 		eventdevs[m].vendor  = 0;
 		eventdevs[m].handle  = -1;
+		memset(eventdevs[m].mousebtns, 0, sizeof(eventdevs[m].mousebtns));
+		memset(eventdevs[m].mouserels, 0, sizeof(eventdevs[m].mouserels));
 	}
 }
 
-int register_inputhandler (int fd, void (*func)(int fd), int grab)
+void rescan_devs()
+{
+	int i, cfd;
+
+        for (i=0; i<EVENT_DEVS; i++) {
+		if (ihandler[i].fd != -1) {
+			cfd=ihandler[i].fd;
+			unregister_inputhandler(ihandler[i].fd);
+			close(cfd);
+			i--;
+		}
+	}
+	for (i=0; i<EVENT_DEVS; i++) {
+		eventdevs[i].product = 0;
+		eventdevs[i].vendor  = 0;
+		eventdevs[i].handle  = -1;
+		memset(eventdevs[i].mousebtns, 0, sizeof(eventdevs[i].mousebtns));
+		memset(eventdevs[i].mouserels, 0, sizeof(eventdevs[i].mouserels));
+	}
+	usleep(100);
+	scan_for_devs();
+}
+
+int register_inputhandler (int mode, int fd, void (*func)(int mode, int fd), int grab)
 {
 	int n;
 
 	for (n=0; n < EVENT_DEVS; n++)
 		if (ihandler[n].fd == -1) {
+			ihandler[n].mode = mode;
 			ihandler[n].fd = fd;
       			ihandler[n].handler = func;
 			ihandler[n].grab = grab;
@@ -279,6 +373,7 @@
 
 	for (n = 0; n < EVENT_DEVS; n++)
 		if (found) {
+			ihandler[n-1].mode = ihandler[n].mode;
 			ihandler[n-1].fd = ihandler[n].fd;
 			ihandler[n-1].handler = ihandler[n].handler;
 		} else if (ihandler[n].fd == fd) {
@@ -296,7 +391,7 @@
 
 	FD_ZERO(watchset);
 	for (maxfd=n=0; n < EVENT_DEVS; n++) {
-		if (ihandler[n].fd == -1) break;
+		if (ihandler[n].fd == -1) continue;
 		FD_SET(ihandler[n].fd, watchset);
 		if (ihandler[n].fd > maxfd)
 			maxfd = ihandler[n].fd;
@@ -309,9 +404,9 @@
 	int n;
 
 	for (n=0; n < EVENT_DEVS; n++) {
-		if (ihandler[n].fd == -1) break;
+		if (ihandler[n].fd == -1) continue;
 		if (FD_ISSET(ihandler[n].fd, inset))
-			ihandler[n].handler (ihandler[n].fd);
+			ihandler[n].handler (ihandler[n].mode, ihandler[n].fd);
 	}
 }
 
@@ -333,27 +428,27 @@
 {
 	int fd = -1;
 
-	printf("Trying to open %s...", uinputdev);
+	syslog(LOG_NOTICE, "Trying to open %s...", uinputdev);
 	fd = open (uinputdev, O_RDWR);
-	printf(" %s.\n", (fd > 0)?"ok":"error");
+	syslog(LOG_NOTICE, " %s.\n", (fd > 0)?"ok":"error");
 	if (fd > 0)
 		return fd;
 
-	printf("Trying to open /dev/uinput...");
+	syslog(LOG_NOTICE, "Trying to open /dev/uinput...");
 	fd = open("/dev/uinput", O_RDWR);
-	printf(" %s.\n", (fd > 0)?"ok":"error");
+	syslog(LOG_NOTICE, " %s.\n", (fd > 0)?"ok":"error");
 	if (fd > 0)
 		return fd;
 
-	printf("Trying to open /dev/input/uinput...");
+	syslog(LOG_NOTICE, "Trying to open /dev/input/uinput...");
 	fd = open("/dev/input/uinput", O_RDWR);
-	printf(" %s.\n", (fd > 0)?"ok":"error");
+	syslog(LOG_NOTICE, " %s.\n", (fd > 0)?"ok":"error");
 	if (fd > 0)
 		return fd;
 
-	printf("Trying to open /dev/misc/uinput...");
+	syslog(LOG_NOTICE, "Trying to open /dev/misc/uinput...");
 	fd = open("/dev/misc/uinput", O_RDWR);
-	printf(" %s.\n", (fd > 0)?"ok":"error");
+	syslog(LOG_NOTICE, " %s.\n", (fd > 0)?"ok":"error");
 	if (fd > 0)
 		return fd;
 
@@ -363,8 +458,9 @@
 int uinput_setup(void)
 {
 	struct uinput_user_dev device;
-	int i;
+	int i, j;
 	
+	memset(&device, 0, sizeof(struct uinput_user_dev));
 	/*setup keyboard device */
 	
         if(ui_keyb_fd > 0) {
@@ -380,7 +476,7 @@
 	
 	strcpy(device.name, "Mouseemu virtual keyboard");
 
-	device.id.bustype = 0;
+	device.id.bustype = BUS_VIRTUAL;
 	device.id.vendor = 0x1F;
 	device.id.product = 0x1F;
 	device.id.version = 0;
@@ -422,7 +518,7 @@
 
         strcpy(device.name, "Mouseemu virtual mouse");
 
-        device.id.bustype = 0;
+        device.id.bustype = BUS_VIRTUAL;
         device.id.vendor = 0x1F;
         device.id.product = 0x1E;
         device.id.version = 0;
@@ -445,10 +541,32 @@
 	ioctl(ui_mouse_fd, UI_SET_RELBIT, REL_X);
 	ioctl(ui_mouse_fd, UI_SET_RELBIT, REL_Y);
 	ioctl(ui_mouse_fd, UI_SET_RELBIT, REL_WHEEL);
+	for (i = REL_X; i <= REL_MAX; ++i) {
+		if (i == REL_X || i == REL_Y || i == REL_WHEEL)
+			continue;
+		for (j = 0; j < EVENT_DEVS; ++j) {
+			if (((unsigned char *)eventdevs[j].mouserels)[i / 8] & (1 << (i % 8))) {
+				debugf("Enabling additional relative event 0x%x\n", i);
+				ioctl(ui_mouse_fd, UI_SET_RELBIT, i);
+				break;
+			}
+		}
+	}
 	
 	ioctl(ui_mouse_fd, UI_SET_KEYBIT, BTN_LEFT);
 	ioctl(ui_mouse_fd, UI_SET_KEYBIT, BTN_RIGHT);
 	ioctl(ui_mouse_fd, UI_SET_KEYBIT, BTN_MIDDLE);
+	for (i = BTN_MISC; i < KEY_OK; ++i) {
+		if (i == BTN_LEFT || i == BTN_RIGHT || i == BTN_MIDDLE)
+			continue;
+		for (j = 0; j < EVENT_DEVS; ++j) {
+			if (((unsigned char *)eventdevs[j].mousebtns)[i / 8] & (1 << (i % 8))) {
+				debugf("Enabling additional button 0x%x\n", i);
+				ioctl(ui_mouse_fd, UI_SET_KEYBIT, i);
+				break;
+			}
+		}
+	}
 
 	ioctl(ui_mouse_fd, UI_DEV_CREATE, NULL);
 
@@ -457,17 +575,18 @@
 
 void uinput_cleanup()
 {
-	int i;
+	int i, cfd;
 	
-	printf("mouseemu: cleaning...\n");
+	syslog(LOG_NOTICE, "mouseemu: cleaning...\n");
 
         uinput_close(ui_keyb_fd);
         uinput_close(ui_mouse_fd);
 
         for (i=0; i<EVENT_DEVS; i++) {
 		if (ihandler[i].fd != -1) {
+			cfd=ihandler[i].fd;
 			unregister_inputhandler(ihandler[i].fd);
-			close(ihandler[i].fd);
+			close(cfd);
 		}
 	}
 
@@ -485,6 +604,11 @@
 {
 	if (sig_num == SIGUSR1) {
 		answer = 1;
+	} else if (sig_num == SIGHUP) {
+		rescan = 1;
+	} else if (sig_num == SIGALRM) {
+		rescan = 1;
+		alarm(5);
 	} else {
 		//printf("mouseemu: aborting on sig %i \n",sig_num);	
 		/*terminate the parent:*/
@@ -508,15 +632,51 @@
 
 	/*SIGUSR1 for process communication
 	 *SIGTERM and SIGCHLD for quitting
+	 *SIGHUP and SIGALRM for rescaning devices
 	 */
 	sigaction(SIGUSR1, &usr_action, NULL);
 	sigaction(SIGTERM, &usr_action, NULL);
+	sigaction(SIGHUP,  &usr_action, NULL);
 	sigaction(SIGCHLD, &usr_action, NULL);
+	sigaction(SIGALRM, &usr_action, NULL);
 	
 	sigprocmask(SIG_UNBLOCK, &mask, 0);	
 
 }
 
+/* print usage message to stdout/stderr */
+void usage(FILE *stream, char *argv[]) {
+	fprintf(stream, "usage: %s \n"
+	                "\t[-middle B2_MOD B2_KEY]\n"
+	                "\t[-right	B3_MOD B3_KEY]\n"
+	                "\t[-scroll SCROLL_MOD]\n"
+	                "\t[-typing-block DELAY]\n"
+	                "\t[-device UINPUT_DEVICE]\n"
+	                "\t[-nofork]\n"
+			"\t[-autorescan]\n"
+			"\t[-debug]\n",
+					argv[0]);
+	fprintf(stream, "All modifier and button key arguments are\n"
+	                "key scancodes. They can be found in \n"
+	                "/usr/src/linux/include/linux/input.h,\n"
+	                "or by using `showkey` in a console.\n"
+	                "Use decimal values. BTN_LEFT(272) is usable as "
+	                "B2_KEY or B3_KEY.\n\n");
+	fprintf(stream, "Default uinput device: " DEFAULT_UINPUT ".\n");
+	fprintf(stream, "Default keys:\n");
+	if (use_defaults)
+		fprintf(stream,
+	                "\tMiddle click : F11 (0 87)\n"
+	                "\tRight click	: F12 (0 88)\n");
+	else
+		fprintf(stream,
+	                "\tMiddle click : none (0 0)\n"
+	                "\tRight click	: none (0 0)\n");
+	fprintf(stream, "\tScroll mod.	: none (0)\n"
+	                "\tDefault blocking time while typing: 300ms\n");
+
+	exit(0);
+}
 
 int main(int argc, char *argv[])
 {
@@ -527,94 +687,117 @@
 	int nofork = 0;
 	//int argv0size = strlen(argv[0]);
 
-	printf("mouseemu " VERSION " (C) Colin Leroy <colin@colino.net>\n");
-
 	install_sighandler();
 
+#ifdef __powerpc__
+	use_defaults = 1;
+#else
+#if defined(__i386__) || defined(__amd64__)
+	{
+		FILE *dmidecode;
+		char line[1024];
+		dmidecode = popen("dmidecode -s system-manufacturer 2>/dev/null", "r");
+		if (dmidecode) {
+			if (fgets(line, 1024, dmidecode) && !strncmp(line, "Apple", 5))
+				use_defaults = 1;
+			pclose(dmidecode);
+		}
+	}
+#endif
+#endif
+	if (!use_defaults) {
+		b2_mod = 0;
+		b2_key = 0;
+		b3_mod = 0;
+		b3_key = 0;
+	}
+
 	uinputdev = DEFAULT_UINPUT;
 	if (argc > 1) {
 		int i = 0;
 		if (!strcmp(argv[1],"-help")) {
-err:
-			printf("usage: %s \n"
-					"\t[-middle B2_MOD B2_KEY]\n"
-			       		"\t[-right  B3_MOD B3_KEY]\n"
-					"\t[-scroll SCROLL_MOD]\n"
-					"\t[-typing-block DELAY]\n"
-					"\t[-device UINPUT_DEVICE]\n"
-					"\t[-nofork]\n",
-			       argv[0]);
-			printf("Key codes can be found in "
-			       "/usr/src/linux/include/linux/input.h,\n"
-			       "or by using `showkey` in console.\n"
-			       "Use decimal values. BTN_LEFT(272) is usable as "
-			       "B2_KEY or B3_KEY.\n\n");
-			printf("Default uinput device: " DEFAULT_UINPUT ".\n");
-			printf("Default keys:\n"
-					"\tMiddle click : F10 (0 68)\n"
-					"\tRight click  : F11 (0 87)\n"
-					"\tScroll mod.  : Alt (56)\n"
-					"\tDefault blocking time while typing: 300ms\n");
-			
-			exit(0);
+			usage(stdout, argv);	
 		} else {
-			for (i = 1; i < argc; i++) {
-				int j = i+1;
+			i = 1;
+			while (i < argc) {
 				if (!strcmp(argv[i], "-middle")) {
-					if (argc > j+1) {
-						b2_mod = atoi(argv[j]);
-						b2_key = atoi(argv[j+1]);
+					if (argc > i+2) {
+						b2_mod = atoi(argv[i+1]);
+						b2_key = atoi(argv[i+2]);
+						i += 3;
 					} else 
-						goto err;
+						usage(stderr, argv);
 					continue;
 				} 
-				if (!strcmp(argv[i], "-right")) {
-					if (argc > j+1) {
-						b3_mod = atoi(argv[j]);
-						b3_key = atoi(argv[j+1]);
+				else if (!strcmp(argv[i], "-right")) {
+					if (argc > i+2) {
+						b3_mod = atoi(argv[i+1]);
+						b3_key = atoi(argv[i+2]);
+						i += 3;
 					} else 
-						goto err;
+						usage(stderr, argv);
 					continue;
 				}
-				if (!strcmp(argv[i], "-scroll")) {
-					if (argc > j) {
-						scroll_mod = atoi(argv[j]);
+				else if (!strcmp(argv[i], "-scroll")) {
+					if (argc > i+1) {
+						scroll_mod = atoi(argv[i+1]);
+						i += 2;
 					} else 
-						goto err;
+						usage(stderr, argv);
 					continue;					
 				}
-				if (!strcmp(argv[i], "-typing-block")) {
-					if (argc > j) {
-						typing_block_delay = atoi(argv[j]);
+				else if (!strcmp(argv[i], "-typing-block")) {
+					if (argc > i+1) {
+						typing_block_delay = atoi(argv[i+1]);
+						i += 2;
 					} else 
-						goto err;
+						usage(stderr, argv);
 					continue;					
 				}
-				if (!strcmp(argv[i], "-device")) {
-					if (argc > j) {
-						uinputdev = argv[j];
+				else if (!strcmp(argv[i], "-device")) {
+					if (argc > i+1) {
+						uinputdev = argv[i+1];
+						i += 2;
 					} else 
-						goto err;
+						usage(stderr, argv);
 					continue;					
 				}
-				if (!strcmp(argv[i], "-nofork")) {
+				else if (!strcmp(argv[i], "-nofork")) {
 					nofork=1;
+					i += 1;
 					continue;
 				}
+				else if (!strcmp(argv[i], "-autorescan")) {
+					autorescan=1;
+					i += 1;
+					continue;
+				}
+				else if (!strcmp(argv[i], "-debug")) {
+					debug=1;
+					i += 1;
+					continue;
+				} else {
+					usage(stderr, argv);
+                }
 			}
 		}
 	}
-	printf("using (%d+%d) as middle button, (%d+%d) as right button, (%d) as scroll.\n",
+	
+	if (nofork) 
+		openlog("mouseemu", LOG_NDELAY | LOG_PERROR | LOG_PID, LOG_DAEMON); 
+	else
+		openlog("mouseemu", LOG_NDELAY | LOG_PID, LOG_DAEMON);
+	
+	syslog(LOG_NOTICE, "mouseemu " VERSION " (C) Colin Leroy <colin@colino.net>\n");
+	syslog(LOG_NOTICE, "using (%d+%d) as middle button, (%d+%d) as right button, (%d) as scroll.\n",
 		b2_mod, b2_key, b3_mod, b3_key, scroll_mod);
-	printf("using %s.\n", uinputdev);
 
-	
 	if (nofork)
 		goto startops;
 
 	fpid = fork();
 	if (fpid == -1) {
-		printf("can't fork\n");
+		syslog(LOG_NOTICE, "can't fork\n");
 		goto startops;
 	}
 	if (fpid != 0) {
@@ -624,7 +807,7 @@
 	setsid();
 	pid = fork();
 	if (pid == -1) {
-		printf("can't fork\n");
+		syslog(LOG_NOTICE, "can't fork\n");
 		goto startops;
 	}
 
@@ -635,8 +818,25 @@
 		 * 
 		 */
 			
+		struct sigaction sa;
 		sigset_t mask, oldmask;
+		FILE *pidfile;
 			       
+		/* SIGHUP and SIGALRM are only useful in the child */
+		memset(&sa, 0, sizeof(sa));
+		sa.sa_handler = SIG_IGN;
+		sigaction(SIGHUP, &sa, NULL);
+		sigaction(SIGALRM, &sa, NULL);
+
+		/* write PID file so the user can signal us for device rescans */
+		pidfile = fopen("/var/run/mouseemu.pid", "w");
+		if (!pidfile) {
+			perror("mouseemu: can't open /var/run/mouseemu.pid");
+			exit(1);
+		}
+		fprintf(pidfile, "%d\n", pid);
+		fclose(pidfile);
+
 		/*we start only after we received the first sigusr1 from child:*/
 
 		sigemptyset(&mask);
@@ -658,7 +858,7 @@
 			}
 			
 		}
-		printf("terminating, %i\n",answer);	
+		syslog(LOG_NOTICE, "terminating, %i\n",answer);	
 		if (kill(pid, SIGTERM)<0)
 			perror("mouseemu: termination of uinput handlers failed\n");
 			
@@ -670,12 +870,16 @@
 	
 	//strncpy(argv[0],"mouseemu",argv0size);
 startops:
+
 	for (i=0; i<EVENT_DEVS; i++) {
 		eventdevs[i].handle = -1;
 		eventdevs[i].vendor = 0;
 		eventdevs[i].product= 0;
+		memset(eventdevs[i].mousebtns, 0, sizeof(eventdevs[i].mousebtns));
+		memset(eventdevs[i].mouserels, 0, sizeof(eventdevs[i].mouserels));
 					                
 		ihandler[i].handler=0;
+		ihandler[i].mode=0;
 		ihandler[i].fd=-1;
 	}
 
@@ -685,28 +889,45 @@
 
 	running = uinput_setup();
 	if (running < 0) {
-		printf("mouseemu: Make sure uinput module is loaded or available "
-			"in the kernel.\n");
+		fprintf(stderr, "No uinput device found! Make sure the uinput module is loaded\n"
+		                "or CONFIG_INPUT_UINPUT is compiled into the kernel.\n");
 	}
                                                          
 
 	chdir("/");
-
+	
+	if (autorescan) 
+		alarm(5);
+	
 	/*main loop*/
 	
         while(running > 0) {
 	
 		tv.tv_sec = 1; tv.tv_usec = 0;
 		maxfd = create_fdset(&inset);
-		if ((val = select (maxfd+1, &inset, NULL, NULL, &tv)) >= 0) {
+		val = select (maxfd+1, &inset, NULL, NULL, &tv);
+		/* signal received, so rescan for devices when idle*/
+		if (val == 0 && rescan) {
+			rescan = 0;
+			rescan_devs();
+		}
+		if (val >= 0) {
 			if (val == 0)
 				usleep(10);
-			else
-				call_inputhandler(&inset);
+			else {
+				if (errno == ENODEV) {
+					debugf("device disconnect detected (select %d, errno %d), rescanning devices\n", val, errno);
+					errno = 0;
+					rescan_devs();
+					usleep(500);
+				} else {
+					call_inputhandler(&inset);
+				}
+			}
 		}
 		/* tell the parent we are running without problems */
 		/* What should we do if the parent is dead? */
-		if (answer) {
+		if (answer && !nofork) {
 			answer=0;
 			kill(getppid(), SIGUSR1);
 		}
--- src/mouseemu/defkeys.h	2004-01-19 12:31:48.000000000 +0100
+++ defkeys.h	2012-04-25 13:37:59.000000000 +0200
@@ -16,9 +16,11 @@
 #define __DEFKEYS_H__
 
 #define BUTTON2MOD	0
-#define BUTTON2KEY	KEY_F10
+#define BUTTON2KEY	KEY_F11
 #define BUTTON3MOD	0
-#define BUTTON3KEY	KEY_F11
-#define SCROLLMOD	KEY_LEFTALT
+#define BUTTON3KEY	KEY_F12
+
+#define SCROLLMOD	0
+
 
 #endif 
--- src/mouseemu/mouseemu.h	2005-03-30 08:41:00.000000000 +0200
+++ mouseemu.h	2012-04-25 13:37:59.000000000 +0200
@@ -33,20 +33,26 @@
 #define BTN2 0x04
 #define BTN3 0x02
 
+#define HANDLER_KEYBOARD (1 << 0)
+#define HANDLER_MOUSE    (1 << 1)
+
 /* device structure */
 typedef struct _kdev {
 	int handle;
 	unsigned short vendor;
 	unsigned short product;
+	unsigned long mousebtns[NBITS(KEY_MAX)];
+	unsigned long mouserels[NBITS(REL_MAX)];
 } kdev;
 
 /* handler structure */
 typedef struct _ihandler {
-	void (*handler)(int fd);
+	void (*handler)(int mode, int fd);
+	int mode;
 	int fd;
 	int grab;
 } input_handler;
 
 void unregister_inputhandler (int fd);
-int register_inputhandler(int fd, void (*func)(int fd), int grab);
+int register_inputhandler(int mode, int fd, void (*func)(int mode, int fd), int grab);
 #endif 
